from aiogram import Bot, Dispatcher, executor, types
#----------------------------------------
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
import aiogram.utils.markdown as md
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
#----------------------------------------
from datetime import datetime
from config import TOKEN
from messages import MESSAGES
from accounts import ALLusers
import keyboards as kb



#–∑–∞–ø—É—Å–∫
#----------------------------------------
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot,storage=MemoryStorage())

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
checkuser = ALLusers('accounts.db')
#----------------------------------------

class Form(StatesGroup):
    spam = State()
    pause = State()

    met = State()
    pausemet = State()
#----------------------------------------
moderlist = [437185033]
#----------------------------------------


async def anti_spam(*args, **kwargs):
    m = args[0]
    await m.answer("–ü–æ–¥–æ–∂–¥–∏ –Ω–µ –º–Ω–æ–≥–æ")


# cancel
#----------------------------------------
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    # Cancel state and inform user about it
    await state.finish()
    # And remove keyboard (just in case)
    await message.reply('–û—Ç–º–µ–Ω–∞.', reply_markup=kb.red_2)
#----------------------------------------


# start help
#----------------------------------------
@dp.message_handler(commands=['start','help'])
@dp.throttled(anti_spam,rate=1) # rate - —ç—Ç–æ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –æ—Ç–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–∞), —Ç–æ —ç—Ç–æ —Ñ–ª—É–¥
async def process_start_command(message: types.Message):
    if (not checkuser.search_player(message.from_user.id)):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º
        checkuser.add_player(message.from_user.id)
        checkuser.update_online(message.from_user.id, True)
        await message.answer(f'üëØ‚Äç‚ôÄÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\nüë§ –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ - /setgroup\n\nüíå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã).\n–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è - /–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\nüí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - /feedback')
        if (checkuser.check_week() == 0):
            await message.answer(MESSAGES['start'], reply_markup=kb.menu_0)
           # await bot.send_photo(message.from_user.id, '—Ç—É—Ç –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω —Ñ–æ—Ç–æ, –ø–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –≤ –±–æ—Ç–µ server_redaktor –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–∞—Å—Ç –æ—Ç–≤–µ—Ç', MESSAGES['start'], reply_markup=kb.menu_0)
        else:
            await message.answer(MESSAGES['start'], reply_markup=kb.menu_1)
           # await bot.send_photo(message.from_user.id, 'AgACAgIAAxkBAAMCYTjNZ9GNXdGVcOfPOy7NKx4MhYIAAj61MRskHslJN33M-HgHkhsBAAMCAANzAAMgBA', MESSAGES['start'], reply_markup=kb.menu_1)
    else:
# –µ—Å–ª–∏ —é–∑–µ—Ä –≤ –±–∞–∑–µ
        if (checkuser.check_week() == 0):
            await message.answer(MESSAGES['start'], reply_markup=kb.menu_0)
           # await bot.send_photo(message.from_user.id, 'AgACAgIAAxkBAAMCYTjNZ9GNXdGVcOfPOy7NKx4MhYIAAj61MRskHslJN33M-HgHkhsBAAMCAANzAAMgBA', MESSAGES['start'], reply_markup=kb.menu_0)
        else:
            await message.answer(MESSAGES['start'], reply_markup=kb.menu_1)
           # await bot.send_photo(message.from_user.id, 'AgACAgIAAxkBAAMCYTjNZ9GNXdGVcOfPOy7NKx4MhYIAAj61MRskHslJN33M-HgHkhsBAAMCAANzAAMgBA', MESSAGES['start'], reply_markup=kb.menu_1)

#----------------------------------------


# –ª–æ–≥–∏
#----------------------------------------
@dp.message_handler(commands=['admin'])
async def process_how_command(message: types.Message):
    if (message.from_user.id in moderlist):
        await message.answer(f'qq', reply_markup=kb.inline_admin)
    else:
        await message.reply(f'–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ - /start')
#----------------------------------------


# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
#----------------------------------------
@dp.message_handler(content_types=["text"])
@dp.throttled(anti_spam,rate=0.5) # rate - —ç—Ç–æ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –æ—Ç–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–∞), —Ç–æ —ç—Ç–æ —Ñ–ª—É–¥
async def do_main_menu(message: types.Message):
    txt = message.text
    if (not checkuser.search_player(message.from_user.id)):
        await message.reply(MESSAGES['fail'])
    else:
        # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if txt == '/feedback':
            await message.answer(MESSAGES['feedback'])
        elif txt == '‚Ü™Ô∏è –ù–∞–∑–∞–¥':
            if (checkuser.check_week() == 0):
                await message.answer(MESSAGES['start'], reply_markup=kb.menu_0)
            #    await bot.send_photo(message.from_user.id, 'AgACAgIAAxkBAAMCYTjNZ9GNXdGVcOfPOy7NKx4MhYIAAj61MRskHslJN33M-HgHkhsBAAMCAANzAAMgBA', MESSAGES['start'], reply_markup=kb.menu_0)
            else:
                await message.answer(MESSAGES['start'], reply_markup=kb.menu_1)
              #  await bot.send_photo(message.from_user.id, 'AgACAgIAAxkBAAMCYTjNZ9GNXdGVcOfPOy7NKx4MhYIAAj61MRskHslJN33M-HgHkhsBAAMCAANzAAMgBA', MESSAGES['start'], reply_markup=kb.menu_1)
        elif txt == 'üîµ –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è':
            if (checkuser.check_week() == 0):
                await message.answer(f'–°–µ–π—á–∞—Å: üîµ –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è', reply_markup=kb.week_ne)
                await message.answer(f'üîµ –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è\n\n–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:', reply_markup=kb.day_ne)
            else:
                await message.answer(f'–°–µ–π—á–∞—Å: üü° —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è', reply_markup=kb.week_ch)
                await message.answer(f'üîµ –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è\n\n–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:', reply_markup=kb.day_ne)
        elif txt == 'üü° —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è':
            if (checkuser.check_week() == 0):
                await message.answer(f'–°–µ–π—á–∞—Å: üîµ –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è', reply_markup=kb.week_ne)
                await message.answer(f'üü° —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è\n\n–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:', reply_markup=kb.day_ch)
            else:
                await message.answer(f'–°–µ–π—á–∞—Å: üü° —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è', reply_markup=kb.week_ch)
                await message.answer(f'üü° —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è\n\n–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:', reply_markup=kb.day_ch)
        elif txt == '–°–µ–π—á–∞—Å: üü° —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è':
            if (checkuser.check_week() == 0):
                await message.reply(f'–û–±–Ω–æ–≤–ª–µ–Ω–æ: üîµ –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è', reply_markup=kb.menu_0)
            else:
                await message.reply(f'–û–±–Ω–æ–≤–ª–µ–Ω–æ: üü° —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è', reply_markup=kb.menu_1)
        elif txt == '–°–µ–π—á–∞—Å: üîµ –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è':
            if (checkuser.check_week() == 0):
                await message.reply(f'–û–±–Ω–æ–≤–ª–µ–Ω–æ: üîµ –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è', reply_markup=kb.menu_0)
            else:
                await message.reply(f'–û–±–Ω–æ–≤–ª–µ–Ω–æ: üü° —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è', reply_markup=kb.menu_1)
        elif txt == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            if (checkuser.check_week() == 0):
                rr = datetime.weekday(datetime.now())
                if (checkuser.check_group(message.from_user.id) == 0):
                    answer_message = f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup'
                elif (rr == 0):
                    answer_message = checkuser.load_day_ne_1(checkuser.check_group(message.from_user.id))
                elif (rr == 1):
                    answer_message = checkuser.load_day_ne_2(checkuser.check_group(message.from_user.id))
                elif (rr == 2):
                    answer_message = checkuser.load_day_ne_3(checkuser.check_group(message.from_user.id))
                elif (rr == 3):
                    answer_message = checkuser.load_day_ne_4(checkuser.check_group(message.from_user.id))
                elif (rr == 4):
                    answer_message = checkuser.load_day_ne_5(checkuser.check_group(message.from_user.id))
                elif (rr == 5):
                    answer_message = checkuser.load_day_ne_6(checkuser.check_group(message.from_user.id))
                elif (rr == 6):
                    answer_message = f'–û—Ç–¥—ã—Ö–∞–π, —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)'
                else:
                    answer_message = f'error'                  

                await message.answer(f'–°–µ–π—á–∞—Å: üîµ –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è', reply_markup=kb.week_ne)
                await message.answer(answer_message, reply_markup=kb.menu_day_ne_back)  
            else:
                rr = datetime.weekday(datetime.now())
                if (checkuser.check_group(message.from_user.id) == 0):
                    answer_message = f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup'
                elif (rr == 0):
                    answer_message = checkuser.load_day_ch_1(checkuser.check_group(message.from_user.id))
                elif (rr == 1):
                    answer_message = checkuser.load_day_ch_2(checkuser.check_group(message.from_user.id))
                elif (rr == 2):
                    answer_message = checkuser.load_day_ch_3(checkuser.check_group(message.from_user.id))
                elif (rr == 3):
                    answer_message = checkuser.load_day_ch_4(checkuser.check_group(message.from_user.id))
                elif (rr == 4):
                    answer_message = checkuser.load_day_ch_5(checkuser.check_group(message.from_user.id))
                elif (rr == 5):
                    answer_message = checkuser.load_day_ch_6(checkuser.check_group(message.from_user.id))
                elif (rr == 6):
                    answer_message = f'–û—Ç–¥—ã—Ö–∞–π, —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)'
                else:
                    answer_message = f'error'                  

                await message.answer(f'–°–µ–π—á–∞—Å: üü° —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è', reply_markup=kb.week_ch)
                await message.answer(answer_message, reply_markup=kb.menu_day_ch_back)  
        elif txt == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
            if (checkuser.check_week() == 0):
                await message.answer(checkuser.settings_load(message.from_user.id), reply_markup=kb.menu_0)
            else:
                await message.answer(checkuser.settings_load(message.from_user.id), reply_markup=kb.menu_1)
        elif txt == '/settings':
            if (checkuser.check_week() == 0):
                await message.answer(checkuser.settings_load(message.from_user.id), reply_markup=kb.menu_0)
            else:
                await message.answer(checkuser.settings_load(message.from_user.id), reply_markup=kb.menu_1)
        elif txt == '/my_id':
            answer_message = checkuser.check_id(message.from_user.id)
            await message.reply(answer_message)
        elif txt == '/konsa':
            if (checkuser.check_week() == 0):
                await message.reply(f'‚ö†Ô∏è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', reply_markup=kb.menu_0)
            else:
                await message.reply(f'‚ö†Ô∏è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', reply_markup=kb.menu_1)
        elif txt == '/met':
            if (checkuser.check_week() == 0):
                answer_message = checkuser.load_met()
                await message.answer(answer_message, reply_markup=kb.menu_0)
            else:
                answer_message = checkuser.load_met()
                await message.answer(answer_message, reply_markup=kb.menu_1)
        elif txt == 'üìö –ó–∞–¥–∞–Ω–∏—è':
            if (checkuser.check_week() == 0):
                await message.answer(f'–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ 2021 –≥–æ–¥', reply_markup=kb.menu_0)
                await message.answer(f'–í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü', reply_markup=kb.menu_zad)                
            else:
                await message.answer(f'–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ 2021 –≥–æ–¥', reply_markup=kb.menu_1)
                await message.answer(f'–í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü', reply_markup=kb.menu_zad)
        elif txt == '/spam':
            if (checkuser.check_kurva(message.from_user.id) == 0):
                await message.reply(f'üè≥Ô∏è‚Äçüåà –¢—ã –Ω–µ –∫—É—Ä–∞—Ç–æ—Ä')
            else:
                await message.reply(f'–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', reply_markup=kb.cancel)
                await Form.spam.set()
        # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        elif txt == '/mm':
            if (checkuser.check_kurva(message.from_user.id) == 0):
                await message.reply(f'üè≥Ô∏è‚Äçüåà –¢—ã –Ω–µ –∫—É—Ä–∞—Ç–æ—Ä')
            else:
                await message.reply(f'üè≥Ô∏è‚Äçüåà –ë–æ—Ç –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ - @kurator_de_santus_bot')
        elif txt == '/notifications':
            await message.reply(checkuser.settings_online(message.from_user.id))
            await message.answer(checkuser.settings_load(message.from_user.id))
        elif txt == '/setgroup':
            await message.reply(MESSAGES['groups'])
        # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
        elif txt == '/setgroup_0':
            await message.reply(checkuser.setgroup(message.from_user.id, 0))
            await message.answer(checkuser.settings_load(message.from_user.id))
        elif txt == '/setgroup_i504b':
            await message.reply(checkuser.setgroup(message.from_user.id, 1))
            await message.answer(checkuser.settings_load(message.from_user.id))
        elif txt == '/setgroup_i505b':
            await message.reply(checkuser.setgroup(message.from_user.id, 2))
            await message.answer(checkuser.settings_load(message.from_user.id))
        elif txt == '/setgroup_i507b':
            await message.reply(checkuser.setgroup(message.from_user.id, 3))
            await message.answer(checkuser.settings_load(message.from_user.id))
        else:
            await message.reply(f'–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ - /start')
        return
#----------------------------------------

# —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
#----------------------------------------
# –Ω–µ—á–µ—Ç–Ω–∞—è
#----------------------------------------
@dp.callback_query_handler(text_contains='day_ne_')
@dp.throttled(anti_spam,rate=0.5)
async def callback_day_ne(call: types.CallbackQuery):
    if call.data and call.data.startswith("day_ne_"):
        code = call.data[-1:]
        if code.isdigit():
            code = int(code)
        if code == 1:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_day_ne_1(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_day_ne_back)
        if code == 2:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_day_ne_2(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_day_ne_back)
        if code == 3:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_day_ne_3(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_day_ne_back)
        if code == 4:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_day_ne_4(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_day_ne_back)
        if code == 5:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_day_ne_5(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_day_ne_back)
        if code == 6:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_day_ne_6(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_day_ne_back)
        if code == 8:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_day_ne_all(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_day_ne_back)
        if code == 9:
                await call.message.edit_text(f'üîµ –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è\n\n–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:', reply_markup=kb.day_ne)
# —á–µ—Ç–Ω–∞—è
#----------------------------------------
@dp.callback_query_handler(text_contains='day_ch_')
@dp.throttled(anti_spam,rate=0.5)
async def callback_day_ch(call: types.CallbackQuery):
    if call.data and call.data.startswith("day_ch_"):
        code = call.data[-1:]
        if code.isdigit():
            code = int(code)
        if code == 1:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_day_ch_1(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_day_ch_back)
        if code == 2:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_day_ch_2(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_day_ch_back)
        if code == 3:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_day_ch_3(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_day_ch_back)
        if code == 4:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_day_ch_4(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_day_ch_back)
        if code == 5:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_day_ch_5(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_day_ch_back)
        if code == 6:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_day_ch_6(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_day_ch_back)
        if code == 8:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_day_ch_all(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_day_ch_back)
        if code == 9:
                await call.message.edit_text(f'üü° —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è\n\n–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:', reply_markup=kb.day_ch)
#----------------------------------------


# –∑–∞–¥–∞–Ω–∏—è
#----------------------------------------
@dp.callback_query_handler(text_contains='zad_')
@dp.throttled(anti_spam,rate=0.5)
async def callback_zadanie(call: types.CallbackQuery):
    if call.data and call.data.startswith("zad_"):
        code = call.data[-1:]
        if code.isdigit():
            code = int(code)
        if code == 1:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_m_09(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_zad_back)
        if code == 2:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_m_10(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_zad_back)
        if code == 3:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_m_11(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_zad_back)
        if code == 4:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_m_12(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_zad_back)
        if code == 5:
            await call.answer(text='–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ', show_alert=True)
        if code == 8:
            if (checkuser.check_group(call.from_user.id) == 0):
                await call.message.edit_text(f'‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π - /setgroup')           
            else:
                answer_message = checkuser.load_m_42(checkuser.check_group(call.from_user.id))
                await call.message.edit_text(answer_message, reply_markup=kb.menu_zad_back)
        if code == 9:
            await call.message.edit_text(f'–í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü', reply_markup=kb.menu_zad)
#----------------------------------------


# admin
#----------------------------------------
@dp.callback_query_handler(text_contains='admin_')
async def callback_admin(call: types.CallbackQuery):
    if call.data and call.data.startswith("admin_"):
        code = call.data[-1:]
        if code.isdigit():
            code = int(code)
        if code == 1:
            answer_message = checkuser.log_info()
            await call.message.delete()
            await bot.send_message(call.from_user.id, text=answer_message, reply_markup=kb.inline_admin)
        if code == 2:
            await call.message.delete()
            await bot.send_message(call.from_user.id, text=f'–ò–∑–º–µ–Ω–∏—Ç—å –Ω–µ–¥–µ–ª—é –Ω–∞:', reply_markup=kb.inline_admin_2)
        if code == 3:
            checkuser.change_week(0)
            await call.message.delete()
            answer_message = checkuser.full_check_week()
            await bot.send_message(call.from_user.id, text=answer_message, reply_markup=kb.inline_admin)
        if code == 4:
            checkuser.change_week(1)
            await call.message.delete()
            answer_message = checkuser.full_check_week()
            await bot.send_message(call.from_user.id, text=answer_message, reply_markup=kb.inline_admin)
        if code == 5:
            await call.message.delete()
            await bot.send_message(call.from_user.id, text=f'qq', reply_markup=kb.inline_admin)
        if code == 6:
            await call.message.delete()
        if code == 7:
            await call.message.delete()
            await bot.send_message(call.from_user.id, text=f'–†–µ–¥–∞–∫—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω - –º–µ—Ç–æ–¥–∏—á–∫–∞', reply_markup=kb.cancel)
            await Form.met.set()
#----------------------------------------


# spam
#----------------------------------------
@dp.message_handler(state=Form.spam)
async def process_form_spam(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['spam'] = message.text
        await bot.send_message(
            message.chat.id,
            md.text(
                md.text('–¢–µ–∫—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã:\n\n',data['spam']),
                sep='\n',
            ),
        )
    await Form.next()
    await message.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=kb.yes)

@dp.message_handler(lambda message: message.text not in ["–î–∞"], state=Form.pause)
async def process_pause_invalid(message: types.Message):
    return await message.answer("/cancel ?", reply_markup=kb.yes)

@dp.message_handler(state=Form.pause)
async def process_pause(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if (checkuser.check_kurva(message.from_user.id) == 0):
            pass
        else:
            data['user_group'] = checkuser.check_group2(message.from_user.id)
            user_for_spam = (checkuser.group_online(checkuser.check_kurva(message.from_user.id)))
            for s in user_for_spam:
                await bot.send_message(s[1], md.text(md.text('üåù –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã ', data['user_group'], '\n\n',data['spam']),sep='\n',),)
    await state.finish()
    await message.reply("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", reply_markup=kb.red_2)


# /met
#----------------------------------------
@dp.message_handler(state=Form.met)
async def process_form_met(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['met'] = message.text
        await bot.send_message(
            message.chat.id,
            md.text(
                md.text('–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n\n',data['met']),
                sep='\n',
            ),
        )
    await Form.next()
    await message.answer("–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥–∏—á–∫–∏?", reply_markup=kb.yes)

@dp.message_handler(lambda message: message.text not in ["–î–∞"], state=Form.pausemet)
async def process_pause_invalid_met1(message: types.Message):
    return await message.answer("/cancel ?", reply_markup=kb.yes)

@dp.message_handler(state=Form.pausemet)
async def process_pause1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        checkuser.set_met(data['met'])
    await state.finish()
    await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply_markup=kb.red_2)
#----------------------------------------
#----------------------------------------


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)